import jakarta.validation.constraints.*;
import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.validation.annotation.Validated;

import java.util.*;

@Slf4j
@RestController
@RequestMapping("/account")
@Validated
public class AccountController {

    private final AccountService accountService;

    public AccountController(AccountService accountService) {
        this.accountService = accountService;
    }

    @PostMapping("/upload")
    public ResponseEntity<Map<String, List<String>>> handleFileUpload(
            @RequestParam("file") MultipartFile file, HttpSession session) {

        log.info("Inside handleFileUpload controller");

        String userId = (String) session.getAttribute("userId");
        if (userId == null || userId.isBlank()) {
            return ResponseEntity.badRequest().body(Map.of("error", List.of("User not logged in")));
        }

        return ResponseEntity.ok(accountService.processExcel(file, userId));
    }

    @PostMapping("/search")
    public ResponseEntity<ExceptionAccountTransferDTO> searchAccount(
            @RequestParam @Pattern(regexp = "\\d{14}", message = "Account number must be exactly 14 digits") String accountNumber) {

        log.info("Inside searchAccount controller");

        ExceptionAccountTransferDTO accountDetails = accountService.findAccount(accountNumber);
        if (accountDetails != null) {
            return ResponseEntity.ok(accountDetails);
        } else {
            ExceptionAccountTransferDTO dto = new ExceptionAccountTransferDTO();
            dto.setMsg("Did not find any account with this number: " + accountNumber);
            return ResponseEntity.ok(dto);
        }
    }

    @PostMapping("/update-transfer")
    public ResponseEntity<Map<String, String>> updateTransferNumber(
            @RequestParam @Pattern(regexp = "\\d{14}", message = "Invalid account number") String accountNumber,
            @RequestParam @Pattern(regexp = "\\d{10,12}", message = "Transfer number must be 10 to 12 digits") String transferNumber,
            @RequestParam @Pattern(regexp = "Y|N", message = "Active flag must be 'Y' or 'N'") String active,
            HttpSession session) {

        log.info("Inside updateTransferNumber controller");

        String userId = (String) session.getAttribute("userId");
        Map<String, String> map = new HashMap<>();

        if (userId == null || userId.isBlank()) {
            map.put("error", "User not logged in");
            return ResponseEntity.badRequest().body(map);
        }

        boolean success = accountService.updateTransferNumber(accountNumber, transferNumber, active, userId);
        map.put(success ? "success" : "failure", success ? "true" : "true");
        return ResponseEntity.ok(map);
    }
}
