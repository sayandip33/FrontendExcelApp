// Escape HTML to prevent XSS
function escapeHtml(str) {
  return str.replace(/[&<>"']/g, function (tag) {
    const charsToReplace = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    return charsToReplace[tag] || tag;
  });
}

function validateAndUpload1() {
  const fileInput = document.getElementById("excelFile");
  const file = fileInput.files[0];

  if (!file || !file.name.endsWith(".xlsx")) {
    showFailureAlert("Please upload a valid .xlsx file.");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  fetch("upload", {
    method: "POST",
    body: formData
  })
    .then(res => res.json())
    .then(msg => {
      downloadFailureDetailsIfPresent(msg);

      const successMsg = msg.success?.[0];
      const failureMsg = msg.failure?.[0];
      const logFile = msg.logFile?.[0] || "";

      if (successMsg) {
        document.getElementById("response").textContent = successMsg;
        if (typeof showSuccessAlert === "function") {
          showSuccessAlert(successMsg);
        }
      }

      if (failureMsg) {
        document.getElementById("errorResponse").textContent = failureMsg;
        if (typeof showFailureAlert === "function") {
          showFailureAlert(failureMsg);
        }
      }

      if (logFile) {
        const a = document.createElement("a");
        a.href = `download-log?fileName=${encodeURIComponent(logFile)}`;
        a.download = logFile;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    })
    .catch(err => {
      console.error("Upload failed:", err);
      showFailureAlert("Something went wrong during upload. Please try again.");
    });
}

function searchAccount1() {
  const acc = document.getElementById("searchAccount").value.trim();

  if (!/^\d{14}$/.test(acc)) {
    showFailureAlert("Enter a valid 14-digit account number (numbers only).");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", acc);

  fetch("search", {
    method: "POST",
    body: formData,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  })
    .then(res => res.json())
    .then(data => {
      const tbody = document.getElementById("resultBody");
      tbody.innerHTML = "";

      if (data && data.accountNumber) {
        const row = document.createElement("tr");

        row.innerHTML = `
          <td>${escapeHtml(data.accountNumber)}</td>
          <td id="activeCell"><span id="activeValue">${escapeHtml(data.active)}</span></td>
          <td>${escapeHtml(data.appName)}</td>
          <td>${escapeHtml(data.createdBy)}</td>
          <td>${escapeHtml(data.createdTime)}</td>
          <td id="transferCell"><span id="transferValue">${escapeHtml(data.transferNumber)}</span></td>
          <td>${escapeHtml(data.updatedBy)}</td>
          <td>${escapeHtml(data.updatedTime)}</td>
          <td id="actionCell">
            <button class="sid" onclick="enableEdit('${escapeHtml(data.transferNumber)}', '${escapeHtml(data.accountNumber)}', '${escapeHtml(data.active)}')">Edit</button>
          </td>
        `;
        tbody.appendChild(row);
      } else {
        const row = document.createElement("tr");
        row.innerHTML = `<td colspan="9" class="sidError">${escapeHtml(data.msg || "No data found.")}</td>`;
        tbody.appendChild(row);
      }
    });
}

function enableEdit(transferNumber, accountNumber, active) {
  const transferCell = document.getElementById("transferCell");
  const activeCell = document.getElementById("activeCell");
  const actionCell = document.getElementById("actionCell");

  transferCell.innerHTML = `<input type="text" id="editTransfer" value="${escapeHtml(transferNumber)}" maxlength="10" />`;
  activeCell.innerHTML = `<input type="text" id="editActive" value="${escapeHtml(active)}" maxlength="1" />`;
  actionCell.innerHTML = `
    <button class="sidUpdate" onclick="updateTransfer('${escapeHtml(accountNumber)}')">Update</button>
    <button class="sidCancel" onclick="cancelEdit('${escapeHtml(transferNumber)}', '${escapeHtml(accountNumber)}', '${escapeHtml(active)}')">Cancel</button>
  `;
}

function cancelEdit(originalValue, accountNumber, activeValue) {
  document.getElementById("transferCell").innerHTML = `<span id="transferValue">${escapeHtml(originalValue)}</span>`;
  document.getElementById("activeCell").innerHTML = `<span id="activeValue">${escapeHtml(activeValue)}</span>`;
  document.getElementById("actionCell").innerHTML = `
    <button class="sid" onclick="enableEdit('${escapeHtml(originalValue)}', '${escapeHtml(accountNumber)}', '${escapeHtml(activeValue)}')">Edit</button>
  `;
}

function updateTransfer(accountNumber) {
  const newTransferNumber = document.getElementById("editTransfer").value.trim();
  const newActive = document.getElementById("editActive").value.trim();

  if (!newTransferNumber || !newActive) {
    showFailureAlert("Field cannot be empty.");
    return;
  }

  if (!/^\d{10}$/.test(newTransferNumber)) {
    showFailureAlert("Enter valid 10-digit Transfer number.");
    return;
  }

  if (!/^[YN]$/i.test(newActive)) {
    showFailureAlert("Please enter only 'Y' or 'N'.");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", accountNumber);
  formData.append("transferNumber", newTransferNumber);
  formData.append("active", newActive);

  fetch("update-transfer", {
    method: "POST",
    body: formData,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  })
    .then(res => res.json())
    .then(response => {
      if (response.failure) {
        showFailureAlert("Error updating Transfer Number.");
      } else {
        showSuccessAlert("Fields updated successfully.");
        searchAccount1();
      }
    })
    .catch(err => {
      console.error(err);
      showFailureAlert("Error updating Transfer Number.");
    });
}

function clearUpload1() {
  const fileInput = document.getElementById("excelFile");
  fileInput.value = "";
  document.getElementById("response").textContent = "";
  document.getElementById("errorResponse").textContent = "";
}

function downloadFailureDetailsIfPresent(responseData) {
  const failureDetails = responseData.failureDetails;

  if (Array.isArray(failureDetails) && failureDetails.length > 0) {
    const content = failureDetails.map(line => line.replace(/[<>]/g, '')).join('\n');
    const blob = new Blob([content], { type: 'text/plain; charset=utf-8' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'upload_failures.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}

function showSuccessAlert(message) {
  const alertBox = document.getElementById("successAlert");
  document.getElementById("alertMessage").textContent = message;
  alertBox.style.display = "block";
  setTimeout(closeAlert, 5000);
}

function closeAlert() {
  const alertBox = document.getElementById("successAlert");
  alertBox.style.display = "none";
}

function showFailureAlert(message) {
  const alertBox = document.getElementById("failureAlert");
  document.getElementById("failureMessage").textContent = message;
  alertBox.style.display = "block";
  setTimeout(closeFailureAlert, 5000);
}

function closeFailureAlert() {
  const alertBox = document.getElementById("failureAlert");
  alertBox.style.display = "none";
}
