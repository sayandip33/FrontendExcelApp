// 1. Validate and upload Excel file
function validateAndUpload1() {
  const fileInput = document.getElementById("excelFile");
  const file = fileInput.files[0];

  if (!file || !file.name.endsWith(".xlsx")) {
    showFailureAlert("Please upload a valid .xlsx file.");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  fetch("upload", {
    method: "POST",
    body: formData
  })
    .then(res => res.json())
    .then(msg => {
      console.log("msg:", msg);

      downloadFailureDetailsIfPresent(msg);

      const successMsg = msg.success?.[0] || "";
      const failureMsg = msg.failure?.[0] || "";
      const logFile = msg.logFile?.[0] || "";

      if (successMsg) {
        document.getElementById("response").textContent = successMsg;
        if (typeof showSuccessAlert === "function") {
          showSuccessAlert(successMsg);
        }
      }

      if (failureMsg) {
        document.getElementById("errorResponse").textContent = failureMsg;
        if (typeof showFailureAlert === "function") {
          showFailureAlert(failureMsg);
        }
      }

      if (logFile) {
        const a = document.createElement("a");
        a.href = `download-log?fileName=${encodeURIComponent(logFile)}`;
        a.download = logFile;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    })
    .catch(err => {
      console.error("Upload failed:", err);
      showFailureAlert("Something went wrong during upload. Please try again.");
    });
}

// 2. Search account by 14-digit number
function searchAccount1() {
  const acc = document.getElementById("searchAccount").value.trim();

  if (!/^\d{14}$/.test(acc)) {
    showFailureAlert("Enter a valid 14-digit account number (numbers only).");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", acc);

  fetch("search", {
    method: "POST",
    body: formData,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  })
    .then(res => res.json())
    .then(data => {
      const tbody = document.getElementById("resultBody");
      tbody.innerHTML = ""; // Clear previous results
      console.log("data:", data);

      if (data && data.accountNumber) {
        const row = document.createElement("tr");

        // Helper to create td with optional id and text content
        const createCell = (text = "", id) => {
          const td = document.createElement("td");
          if (id) td.id = id;
          td.textContent = text;
          return td;
        };

        row.appendChild(createCell(data.accountNumber));

        // Active cell with span
        const activeCell = createCell("", "activeCell");
        const spanActive = document.createElement("span");
        spanActive.id = "activeValue";
        spanActive.textContent = data.active || "";
        activeCell.appendChild(spanActive);
        row.appendChild(activeCell);

        row.appendChild(createCell(data.appName));
        row.appendChild(createCell(data.createdBy));
        row.appendChild(createCell(data.createdTime));

        // Transfer cell with span
        const transferCell = createCell("", "transferCell");
        const spanTransfer = document.createElement("span");
        spanTransfer.id = "transferValue";
        spanTransfer.textContent = data.transferNumber || "";
        transferCell.appendChild(spanTransfer);
        row.appendChild(transferCell);

        row.appendChild(createCell(data.updatedBy));
        row.appendChild(createCell(data.updatedTime));

        // Action cell with Edit button
        const actionCell = document.createElement("td");
        actionCell.id = "actionCell";
        const btnEdit = document.createElement("button");
        btnEdit.className = "sid";
        btnEdit.textContent = "Edit";
        btnEdit.addEventListener("click", () => {
          enableEdit(data.transferNumber, data.accountNumber, data.active);
        });
        actionCell.appendChild(btnEdit);
        row.appendChild(actionCell);

        tbody.appendChild(row);
      } else if (data && data.msg) {
        // Show error message safely
        const errorRow = document.createElement("tr");
        const errorCell = document.createElement("td");
        errorCell.colSpan = 9;
        errorCell.className = "sidError";
        errorCell.textContent = data.msg;
        errorRow.appendChild(errorCell);
        tbody.appendChild(errorRow);
      }
    })
    .catch(err => {
      console.error("Search failed:", err);
      showFailureAlert("Something went wrong during search. Please try again.");
    });
}

// 3. Enable edit mode for transferNumber and active fields
function enableEdit(transferNumber, accountNumber, active) {
  const transferCell = document.getElementById("transferCell");
  const activeCell = document.getElementById("activeCell");
  const actionCell = document.getElementById("actionCell");

  // Clear existing content
  transferCell.textContent = "";
  activeCell.textContent = "";
  actionCell.textContent = "";

  // Create input for transferNumber
  const inputTransfer = document.createElement("input");
  inputTransfer.type = "text";
  inputTransfer.id = "editTransfer";
  inputTransfer.value = transferNumber || "";
  inputTransfer.maxLength = 10;
  transferCell.appendChild(inputTransfer);

  // Create input for active
  const inputActive = document.createElement("input");
  inputActive.type = "text";
  inputActive.id = "editActive";
  inputActive.value = active || "";
  inputActive.maxLength = 1;
  activeCell.appendChild(inputActive);

  // Create Update button
  const btnUpdate = document.createElement("button");
  btnUpdate.className = "sidUpdate";
  btnUpdate.textContent = "Update";
  btnUpdate.addEventListener("click", () => {
    updateTransfer(accountNumber);
  });

  // Create Cancel button
  const btnCancel = document.createElement("button");
  btnCancel.className = "sidCancel";
  btnCancel.textContent = "Cancel";
  btnCancel.addEventListener("click", () => {
    cancelEdit(transferNumber, accountNumber, active);
  });

  actionCell.appendChild(btnUpdate);
  actionCell.appendChild(btnCancel);
}

// 4. Cancel edit, restore original values
function cancelEdit(originalTransfer, accountNumber, originalActive) {
  const transferCell = document.getElementById("transferCell");
  const activeCell = document.getElementById("activeCell");
  const actionCell = document.getElementById("actionCell");

  transferCell.textContent = "";
  const spanTransfer = document.createElement("span");
  spanTransfer.id = "transferValue";
  spanTransfer.textContent = originalTransfer || "";
  transferCell.appendChild(spanTransfer);

  activeCell.textContent = "";
  const spanActive = document.createElement("span");
  spanActive.id = "activeValue";
  spanActive.textContent = originalActive || "";
  activeCell.appendChild(spanActive);

  actionCell.textContent = "";
  const btnEdit = document.createElement("button");
  btnEdit.className = "sid";
  btnEdit.textContent = "Edit";
  btnEdit.addEventListener("click", () => {
    enableEdit(originalTransfer, accountNumber, originalActive);
  });
  actionCell.appendChild(btnEdit);
}

// 5. Update transfer number and active status
function updateTransfer(accountNumber) {
  const newTransferNumber = document.getElementById("editTransfer").value.trim();
  const newActive = document.getElementById("editActive").value.trim();

  if (!newTransferNumber || !newActive) {
    showFailureAlert("Fields cannot be empty.");
    return;
  }

  if (!/^\d{10}$/.test(newTransferNumber)) {
    showFailureAlert("Enter valid 10-digit Transfer number.");
    return;
  }

  if (!/^[YN]$/i.test(newActive)) {
    showFailureAlert("Please enter only 'Y' or 'N' for Active.");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", accountNumber);
  formData.append("transferNumber", newTransferNumber);
  formData.append("active", newActive);

  fetch("update-transfer", {
    method: "POST",
    body: formData,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  })
    .then(res => res.json())
    .then(response => {
      console.log("response:", response);

      if (response.failure) {
        showFailureAlert("Error updating Transfer Number.");
        return;
      } else {
        searchAccount1(); // Refresh data
        showSuccessAlert("Transfer Number updated successfully.");
      }
    })
    .catch(err => {
      console.error(err);
      showFailureAlert("Error updating Transfer Number.");
    });
}

// 6. Clear upload form and messages
function clearUpload1() {
  const fileInput = document.getElementById("excelFile");
  fileInput.value = "";
  document.getElementById("response").textContent = "";
  document.getElementById("errorResponse").textContent = "";
}

// 7. Download failure details if present
function downloadFailureDetailsIfPresent(responseData) {
  const failureDetails = responseData.failureDetails;

  if (failureDetails && Array.isArray(failureDetails) && failureDetails.length > 0) {
    const content = failureDetails.join("\n");
    const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "upload_failures.txt";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    URL.revokeObjectURL(url);
  }
}

// 8. Show success alert
function showSuccessAlert(message) {
  const alertBox = document.getElementById("successAlert");
  document.getElementById("alertMessage").textContent = message;
  alertBox.style.display = "block";

  setTimeout(() => {
    closeAlert();
  }, 5000);
}

function closeAlert() {
  const alertBox = document.getElementById("successAlert");
  alertBox.style.display = "none";
}

// 9. Show failure alert
function showFailureAlert(message) {
  const alertBox = document.getElementById("failureAlert");
  document.getElementById("failureMessage").textContent = message;
  alertBox.style.display = "block";

  setTimeout(() => {
    closeFailureAlert();
  }, 5000);
}

function closeFailureAlert() {
  const alertBox = document.getElementById("failureAlert");
  alertBox.style.display = "none";
}
