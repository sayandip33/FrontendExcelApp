üîÅ Replace this block:

if (!failedList.isEmpty()) {
    String filename = "failed_accounts_" + System.currentTimeMillis() + ".txt";
    Path logPath = Paths.get("logs", filename);
    Files.createDirectories(logPath.getParent());
    Files.write(logPath, failedList, StandardCharsets.UTF_8);
    returnMap.put("failure", List.of(failedList.size() + " records failed."));
    returnMap.put("logFile", List.of(filename));
}
‚úÖ With this:

if (!failedList.isEmpty()) {
    returnMap.put("failure", List.of(failedList.size() + " records failed."));
    returnMap.put("failureDetails", failedList);
}




Optional: Remove File Handling Method
You can delete this method if you're no longer using file-based logs:


public Resource getLogFile(String fileName) { ... }


 Updated Controller (Remove /download-log endpoint if not needed)
If you want to completely rely on in-memory log delivery, you can delete this endpoint:


@GetMapping("/download-log")
public ResponseEntity<Resource> downloadLog(@RequestParam("fileName") String fileName) { ... }



‚úÖ What Changes in Frontend?
The frontend can now directly access response.failureDetails, for example:


{
  "success": ["10 records uploaded successfully."],
  "failure": ["5 records failed."],
  "failureDetails": [
    "Row 2: Invalid Account Number - 123",
    "Row 4: Empty cell",
    ...
  ]
}



function downloadFailureDetailsIfPresent(responseData) {
    const failureDetails = responseData.failureDetails;

    if (failureDetails && Array.isArray(failureDetails) && failureDetails.length > 0) {
        const content = failureDetails.join('\n');
        const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = 'upload_failures.txt';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        // Cleanup the object URL
        URL.revokeObjectURL(url);
    }
}




fetch('/api/account/upload', {
    method: 'POST',
    body: formData,
})
    .then(res => res.json())
    .then(data => {
        console.log('Upload Result:', data);
        downloadFailureDetailsIfPresent(data);
    })
    .catch(err => console.error('Upload failed', err));
