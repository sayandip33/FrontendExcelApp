import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ExceptionAccountTransferDTO {

    @NotBlank(message = "Account number cannot be blank")
    @Pattern(regexp = "\\d{14}", message = "Account number must be exactly 14 digits")
    private String accountNumber;

    @Pattern(regexp = "Y|N", message = "Active flag must be either 'Y' or 'N'")
    private String active = "Y";

    @NotBlank(message = "App name cannot be blank")
    @Size(max = 5, message = "App name can be max 5 characters")
    private String appName = "RA";

    @NotBlank(message = "Transfer number cannot be blank")
    @Pattern(regexp = "\\d{10,12}", message = "Transfer number must be between 10 to 12 digits")
    private String transferNumber = "1234561234";

    @NotBlank(message = "CreatedBy is required")
    private String createdBy;

    @PastOrPresent(message = "Created time cannot be in the future")
    private LocalDateTime createdTime = LocalDateTime.now();

    @NotBlank(message = "UpdatedBy is required")
    private String updatedBy = "NA";

    private LocalDateTime updatedTime;

    private String msg;
}



@PostMapping("/submit")
public ResponseEntity<String> submit(@Valid @RequestBody ExceptionAccountTransferDTO dto, BindingResult result) {
    if (result.hasErrors()) {
        return ResponseEntity.badRequest().body(result.getAllErrors().get(0).getDefaultMessage());
    }
    // proceed with logic
    return ResponseEntity.ok("Success");
}



