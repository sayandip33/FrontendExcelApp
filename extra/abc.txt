// Helper function to escape HTML
function escapeHtml(str) {
  return str.replace(/[&<>"']/g, function (tag) {
    const charsToReplace = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    return charsToReplace[tag] || tag;
  });
}

function validateAndUpload1() {
  const fileInput = document.getElementById("excelFile");
  const file = fileInput.files[0];

  if (!file || !file.name.endsWith(".xlsx")) {
    showFailureAlert("Please upload a valid .xlsx file.");
    return;
  }

  const formData = new FormData();
  formData.append("file", file);

  fetch("upload", {
    method: "POST",
    body: formData
  })
    .then(res => res.json())
    .then(msg => {
      console.log('msg:', msg);
      downloadFailureDetailsIfPresent(msg);

      const successMsg = msg.success?.[0];
      const failureMsg = msg.failure?.[0];
      const logFile = msg.logFile?.[0] || "";

      if (successMsg) {
        document.getElementById("response").textContent = successMsg;
        if (typeof showSuccessAlert === "function") {
          showSuccessAlert(successMsg);
        }
      }

      if (failureMsg) {
        document.getElementById("errorResponse").textContent = failureMsg;
        if (typeof showFailureAlert === "function") {
          showFailureAlert(failureMsg);
        }
      }

      if (logFile) {
        const a = document.createElement("a");
        a.href = `download-log?fileName=${encodeURIComponent(logFile)}`;
        a.download = logFile;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    })
    .catch(err => {
      console.error("Upload failed:", err);
      showFailureAlert("Something went wrong during upload. Please try again.");
    });
}

function searchAccount1() {
  const acc = document.getElementById("searchAccount").value.trim();

  if (!/^\d{14}$/.test(acc)) {
    showFailureAlert("Enter a valid 14-digit account number (numbers only).\");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", acc);

  fetch("search", {
    method: "POST",
    body: formData,
    headers: { "Content-Type": "application/x-www-form-urlencoded" }
  })
    .then(res => res.json())
    .then(data => {
      const tbody = document.getElementById("resultBody");
      tbody.innerHTML = "";

      if (data && data.accountNumber) {
        const row = document.createElement("tr");

        const fields = [
          data.accountNumber,
          data.active,
          data.appName,
          data.createdBy,
          data.createdTime,
          data.transferNumber,
          data.updatedBy,
          data.updatedTime
        ];

        fields.forEach(field => {
          const td = document.createElement("td");
          td.textContent = field;
          row.appendChild(td);
        });

        const actionTd = document.createElement("td");
        const btn = document.createElement("button");
        btn.className = "sid";
        btn.textContent = "Edit";
        btn.onclick = () => enableEdit(data.transferNumber, data.accountNumber, data.active);
        actionTd.appendChild(btn);
        row.appendChild(actionTd);

        tbody.appendChild(row);
      } else {
        const row = document.createElement("tr");
        const td = document.createElement("td");
        td.colSpan = 9;
        td.className = "sidError";
        td.textContent = data.msg;
        row.appendChild(td);
        tbody.appendChild(row);
      }
    });
}

function enableEdit(transferNumber, accountNumber, active) {
  const transferCell = document.getElementById("transferCell");
  const activeCell = document.getElementById("activeCell");
  const actionCell = document.getElementById("actionCell");

  transferCell.innerHTML = "";
  activeCell.innerHTML = "";
  actionCell.innerHTML = "";

  const transferInput = document.createElement("input");
  transferInput.type = "text";
  transferInput.id = "editTransfer";
  transferInput.maxLength = 10;
  transferInput.value = transferNumber;
  transferCell.appendChild(transferInput);

  const activeInput = document.createElement("input");
  activeInput.type = "text";
  activeInput.id = "editActive";
  activeInput.maxLength = 1;
  activeInput.value = active;
  activeCell.appendChild(activeInput);

  const updateBtn = document.createElement("button");
  updateBtn.className = "sidUpdate";
  updateBtn.textContent = "Update";
  updateBtn.onclick = () => updateTransfer(accountNumber);

  const cancelBtn = document.createElement("button");
  cancelBtn.className = "sidCancel";
  cancelBtn.textContent = "Cancel";
  cancelBtn.onclick = () => cancelEdit(transferNumber, accountNumber, active);

  actionCell.appendChild(updateBtn);
  actionCell.appendChild(cancelBtn);
}

function cancelEdit(originalValue, accountNumber, activeValue) {
  const transferSpan = document.createElement("span");
  transferSpan.id = "transferValue";
  transferSpan.textContent = originalValue;
  document.getElementById("transferCell").innerHTML = "";
  document.getElementById("transferCell").appendChild(transferSpan);

  const activeSpan = document.createElement("span");
  activeSpan.id = "activeValue";
  activeSpan.textContent = activeValue;
  document.getElementById("activeCell").innerHTML = "";
  document.getElementById("activeCell").appendChild(activeSpan);

  const actionCell = document.getElementById("actionCell");
  actionCell.innerHTML = "";
  const editBtn = document.createElement("button");
  editBtn.className = "sid";
  editBtn.textContent = "Edit";
  editBtn.onclick = () => enableEdit(originalValue, accountNumber, activeValue);
  actionCell.appendChild(editBtn);
}

function updateTransfer(accountNumber) {
  const newTransferNumber = document.getElementById("editTransfer").value.trim();
  const newActive = document.getElementById("editActive").value.trim();

  if (!newTransferNumber || !newActive) {
    showFailureAlert("Field cannot be empty.");
    return;
  }

  if (!/^\d{10}$/.test(newTransferNumber)) {
    showFailureAlert("Enter valid 10-digit Transfer number.");
    return;
  }

  if (!/^[YN]$/i.test(newActive)) {
    showFailureAlert("Please enter only 'Y' or 'N'.");
    return;
  }

  const formData = new URLSearchParams();
  formData.append("accountNumber", accountNumber);
  formData.append("transferNumber", newTransferNumber);
  formData.append("active", newActive);

  fetch("update-transfer", {
    method: "POST",
    body: formData,
    headers: { "Content-Type": "application/x-www-form-urlencoded" }
  })
    .then(res => res.json())
    .then(response => {
      if (response.failure) {
        showFailureAlert("Error updating Transfer Number.");
        return;
      } else {
        searchAccount1();
        showSuccessAlert("Fields updated successfully.");
      }
    })
    .catch(err => {
      console.error(err);
      showFailureAlert("Error updating Transfer Number.");
    });
}

function clearUpload1() {
  const fileInput = document.getElementById("excelFile");
  fileInput.value = "";
  document.getElementById("response").textContent = "";
  document.getElementById("errorResponse").textContent = "";
}

function downloadFailureDetailsIfPresent(responseData) {
  const failureDetails = responseData.failureDetails;

  if (failureDetails && Array.isArray(failureDetails) && failureDetails.length > 0) {
    const content = failureDetails.map(line => line.replace(/[<>]/g, '')).join('\n');
    const blob = new Blob([content], { type: 'text/plain; charset=utf-8' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = 'upload_failures.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }
}

function showSuccessAlert(message) {
  const alertBox = document.getElementById("successAlert");
  document.getElementById("alertMessage").textContent = message;
  alertBox.style.display = "block";
  setTimeout(() => closeAlert(), 5000);
}

function closeAlert() {
  const alertBox = document.getElementById("successAlert");
  alertBox.style.display = "none";
}

function showFailureAlert(message) {
  const alertBox = document.getElementById("failureAlert");
  document.getElementById("failureMessage").textContent = message;
  alertBox.style.display = "block";
  setTimeout(() => closeFailureAlert(), 5000);
}

function closeFailureAlert() {
  const alertBox = document.getElementById("failureAlert");
  alertBox.style.display = "none";
}
